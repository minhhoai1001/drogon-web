/**
 *
 *  Teachers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Teachers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::analysis;

const std::string Teachers::Cols::_id = "id";
const std::string Teachers::Cols::_first_name = "first_name";
const std::string Teachers::Cols::_last_name = "last_name";
const std::string Teachers::Cols::_school = "school";
const std::string Teachers::Cols::_hire_date = "hire_date";
const std::string Teachers::Cols::_salary = "salary";
const std::string Teachers::primaryKeyName = "id";
const bool Teachers::hasPrimaryKey = true;
const std::string Teachers::tableName = "teachers";

const std::vector<typename Teachers::MetaData> Teachers::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"first_name","std::string","character varying",25,0,0,0},
{"last_name","std::string","character varying",50,0,0,0},
{"school","std::string","character varying",50,0,0,0},
{"hire_date","::trantor::Date","date",0,0,0,0},
{"salary","std::string","numeric",0,0,0,0}
};
const std::string &Teachers::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Teachers::Teachers(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(r["first_name"].as<std::string>());
        }
        if(!r["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(r["last_name"].as<std::string>());
        }
        if(!r["school"].isNull())
        {
            school_=std::make_shared<std::string>(r["school"].as<std::string>());
        }
        if(!r["hire_date"].isNull())
        {
            auto daysStr = r["hire_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["salary"].isNull())
        {
            salary_=std::make_shared<std::string>(r["salary"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            school_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            salary_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Teachers::Teachers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            school_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            salary_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

Teachers::Teachers(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("first_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson["first_name"].asString());
        }
    }
    if(pJson.isMember("last_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson["last_name"].asString());
        }
    }
    if(pJson.isMember("school"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["school"].isNull())
        {
            school_=std::make_shared<std::string>(pJson["school"].asString());
        }
    }
    if(pJson.isMember("hire_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["hire_date"].isNull())
        {
            auto daysStr = pJson["hire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("salary"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["salary"].isNull())
        {
            salary_=std::make_shared<std::string>(pJson["salary"].asString());
        }
    }
}

void Teachers::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            school_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            salary_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void Teachers::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("first_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson["first_name"].asString());
        }
    }
    if(pJson.isMember("last_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson["last_name"].asString());
        }
    }
    if(pJson.isMember("school"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["school"].isNull())
        {
            school_=std::make_shared<std::string>(pJson["school"].asString());
        }
    }
    if(pJson.isMember("hire_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["hire_date"].isNull())
        {
            auto daysStr = pJson["hire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("salary"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["salary"].isNull())
        {
            salary_=std::make_shared<std::string>(pJson["salary"].asString());
        }
    }
}

const int64_t &Teachers::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Teachers::getId() const noexcept
{
    return id_;
}
void Teachers::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Teachers::PrimaryKeyType & Teachers::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Teachers::getValueOfFirstName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstName_)
        return *firstName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teachers::getFirstName() const noexcept
{
    return firstName_;
}
void Teachers::setFirstName(const std::string &pFirstName) noexcept
{
    firstName_ = std::make_shared<std::string>(pFirstName);
    dirtyFlag_[1] = true;
}
void Teachers::setFirstName(std::string &&pFirstName) noexcept
{
    firstName_ = std::make_shared<std::string>(std::move(pFirstName));
    dirtyFlag_[1] = true;
}
void Teachers::setFirstNameToNull() noexcept
{
    firstName_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Teachers::getValueOfLastName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastName_)
        return *lastName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teachers::getLastName() const noexcept
{
    return lastName_;
}
void Teachers::setLastName(const std::string &pLastName) noexcept
{
    lastName_ = std::make_shared<std::string>(pLastName);
    dirtyFlag_[2] = true;
}
void Teachers::setLastName(std::string &&pLastName) noexcept
{
    lastName_ = std::make_shared<std::string>(std::move(pLastName));
    dirtyFlag_[2] = true;
}
void Teachers::setLastNameToNull() noexcept
{
    lastName_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Teachers::getValueOfSchool() const noexcept
{
    const static std::string defaultValue = std::string();
    if(school_)
        return *school_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teachers::getSchool() const noexcept
{
    return school_;
}
void Teachers::setSchool(const std::string &pSchool) noexcept
{
    school_ = std::make_shared<std::string>(pSchool);
    dirtyFlag_[3] = true;
}
void Teachers::setSchool(std::string &&pSchool) noexcept
{
    school_ = std::make_shared<std::string>(std::move(pSchool));
    dirtyFlag_[3] = true;
}
void Teachers::setSchoolToNull() noexcept
{
    school_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Teachers::getValueOfHireDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(hireDate_)
        return *hireDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Teachers::getHireDate() const noexcept
{
    return hireDate_;
}
void Teachers::setHireDate(const ::trantor::Date &pHireDate) noexcept
{
    hireDate_ = std::make_shared<::trantor::Date>(pHireDate.roundDay());
    dirtyFlag_[4] = true;
}
void Teachers::setHireDateToNull() noexcept
{
    hireDate_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Teachers::getValueOfSalary() const noexcept
{
    const static std::string defaultValue = std::string();
    if(salary_)
        return *salary_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teachers::getSalary() const noexcept
{
    return salary_;
}
void Teachers::setSalary(const std::string &pSalary) noexcept
{
    salary_ = std::make_shared<std::string>(pSalary);
    dirtyFlag_[5] = true;
}
void Teachers::setSalary(std::string &&pSalary) noexcept
{
    salary_ = std::make_shared<std::string>(std::move(pSalary));
    dirtyFlag_[5] = true;
}
void Teachers::setSalaryToNull() noexcept
{
    salary_.reset();
    dirtyFlag_[5] = true;
}

void Teachers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Teachers::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "first_name",
        "last_name",
        "school",
        "hire_date",
        "salary"
    };
    return inCols;
}

void Teachers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstName())
        {
            binder << getValueOfFirstName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastName())
        {
            binder << getValueOfLastName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSchool())
        {
            binder << getValueOfSchool();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getHireDate())
        {
            binder << getValueOfHireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSalary())
        {
            binder << getValueOfSalary();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Teachers::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Teachers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstName())
        {
            binder << getValueOfFirstName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastName())
        {
            binder << getValueOfLastName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSchool())
        {
            binder << getValueOfSchool();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getHireDate())
        {
            binder << getValueOfHireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSalary())
        {
            binder << getValueOfSalary();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Teachers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstName())
    {
        ret["first_name"]=getValueOfFirstName();
    }
    else
    {
        ret["first_name"]=Json::Value();
    }
    if(getLastName())
    {
        ret["last_name"]=getValueOfLastName();
    }
    else
    {
        ret["last_name"]=Json::Value();
    }
    if(getSchool())
    {
        ret["school"]=getValueOfSchool();
    }
    else
    {
        ret["school"]=Json::Value();
    }
    if(getHireDate())
    {
        ret["hire_date"]=getHireDate()->toDbStringLocal();
    }
    else
    {
        ret["hire_date"]=Json::Value();
    }
    if(getSalary())
    {
        ret["salary"]=getValueOfSalary();
    }
    else
    {
        ret["salary"]=Json::Value();
    }
    return ret;
}

Json::Value Teachers::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstName())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastName())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSchool())
            {
                ret[pMasqueradingVector[3]]=getValueOfSchool();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getHireDate())
            {
                ret[pMasqueradingVector[4]]=getHireDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSalary())
            {
                ret[pMasqueradingVector[5]]=getValueOfSalary();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstName())
    {
        ret["first_name"]=getValueOfFirstName();
    }
    else
    {
        ret["first_name"]=Json::Value();
    }
    if(getLastName())
    {
        ret["last_name"]=getValueOfLastName();
    }
    else
    {
        ret["last_name"]=Json::Value();
    }
    if(getSchool())
    {
        ret["school"]=getValueOfSchool();
    }
    else
    {
        ret["school"]=Json::Value();
    }
    if(getHireDate())
    {
        ret["hire_date"]=getHireDate()->toDbStringLocal();
    }
    else
    {
        ret["hire_date"]=Json::Value();
    }
    if(getSalary())
    {
        ret["salary"]=getValueOfSalary();
    }
    else
    {
        ret["salary"]=Json::Value();
    }
    return ret;
}

bool Teachers::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("first_name"))
    {
        if(!validJsonOfField(1, "first_name", pJson["first_name"], err, true))
            return false;
    }
    if(pJson.isMember("last_name"))
    {
        if(!validJsonOfField(2, "last_name", pJson["last_name"], err, true))
            return false;
    }
    if(pJson.isMember("school"))
    {
        if(!validJsonOfField(3, "school", pJson["school"], err, true))
            return false;
    }
    if(pJson.isMember("hire_date"))
    {
        if(!validJsonOfField(4, "hire_date", pJson["hire_date"], err, true))
            return false;
    }
    if(pJson.isMember("salary"))
    {
        if(!validJsonOfField(5, "salary", pJson["salary"], err, true))
            return false;
    }
    return true;
}
bool Teachers::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teachers::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("first_name"))
    {
        if(!validJsonOfField(1, "first_name", pJson["first_name"], err, false))
            return false;
    }
    if(pJson.isMember("last_name"))
    {
        if(!validJsonOfField(2, "last_name", pJson["last_name"], err, false))
            return false;
    }
    if(pJson.isMember("school"))
    {
        if(!validJsonOfField(3, "school", pJson["school"], err, false))
            return false;
    }
    if(pJson.isMember("hire_date"))
    {
        if(!validJsonOfField(4, "hire_date", pJson["hire_date"], err, false))
            return false;
    }
    if(pJson.isMember("salary"))
    {
        if(!validJsonOfField(5, "salary", pJson["salary"], err, false))
            return false;
    }
    return true;
}
bool Teachers::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teachers::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 25)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 25)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
